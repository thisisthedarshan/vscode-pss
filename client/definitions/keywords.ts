export const keywords = {
  list: [
    "addr_handle_t", "abstract", "action", "activity", "array", "as", "assert", "atomic", "bind", "bins", "bit",
    "body", "bool", "break", "buffer", "chandle", "class", "compile", "component", "concat", "const",
    "constraint", "continue", "cover", "covergroup", "coverpoint", "cross", "declaration", "default",
    "disable", "dist", "do", "dynamic", "else", "enum", "eventually", "exec", "export", "extend", "false",
    "file", "float32", "float64", "forall", "foreach", "function", "has", "header", "if", "iff", "ignore_bins",
    "illegal_bins", "import", "in", "init", "init_down", "init_up", "inout", "input", "instance", "int",
    "join_branch", "join_first", "join_none", "join_select", "list", "lock", "map", "match", "monitor",
    "null", "output", "override", "package", "parallel", "pool", "post_solve", "pre_body", "pre_solve",
    "private", "protected", "public", "pure", "rand", "randomize", "ref", "repeat", "replicate", "resource",
    "return", "run_end", "run_start", "schedule", "select", "sequence", "set", "share", "solve", "state",
    "static", "stream", "string", "struct", "super", "symbol", "target", "this", "true", "type", "typedef",
    "unique", "void", "while", "with", "yield", "format", "print", "message", "file_open", "file_close",
    "file_exists", "file_write", "file_read", "file_write_lines", "file_read_lines", "error", "fatal",
    "urandom", "urandom_range", "float_mantissa", "float_exponent", "float_sign", "to_float", "make_handle_from_claim",
    "make_handle_from_handle", "addr_value", "addr_value_solve", "get_tag", "read8", "write8", "get_offset_of_instance",
    "log", "pow", "addr_value_abs", "read16", "read32", "read64", "write16", "write32", "write64", "read_bytes",
    "write_bytes", "read_struct", "write_struct", "read", "write", "read_val", "write_val", "write_masked",
    "write_val_masked", "write_field", "write_fields", "get_offset_of_instance_array", "get_offset_of_path", "set_handle",
    "std_pkg", "executor_pkg", "executor_pkg"
  ],
  descriptions: [
    "Type definition for chandle, used for address related tasks.",
    "Defines an abstract class that cannot be instantiated directly.",
    "Defines an action, the basic executable unit in PSS.",
    "Defines a block of code describing activities within an action.",
    "Defines an array, a fixed-size collection of elements of the same type.",
    "Specifies an alias or alternate name for an imported element.",
    "Validates a condition during execution to check if it holds true.",
    "Marks an action or statement as atomic, meaning it must execute without interruption.",
    "Binds a value to a variable, such as in binding constraints or assignments.",
    "Defines bins, used in conjunction with coverage definitions.",
    "Specifies a bit value, typically used in low-level bit manipulation or for defining bit-widths.",
    "Defines the body of a block or function.",
    "Represents a boolean value (true or false).",
    "Exits from the current loop or switch statement.",
    "Defines a buffer for holding data temporarily during execution.",
    "Defines a channel for communication between different processes or components.",
    "Defines a class, a template for creating objects and their behavior.",
    "Used for compiling code or defining compile-time directives.",
    "Defines a component, an independent module or unit in a system.",
    "Concatenates multiple elements or strings together.",
    "Defines a constant value that cannot be changed after initialization.",
    "Defines a constraint or rule to be enforced during execution or at compile time.",
    "Skips the current iteration of a loop or conditional statement.",
    "Defines a coverage point, typically used in assertion or verification.",
    "Defines a group of coverage points for more structured coverage analysis.",
    "Defines a single coverage point in a coverage group.",
    "Performs a cross-coverage between multiple coverage points.",
    "Defines a variable or expression in the form of a declaration.",
    "Specifies a default value for a variable or condition.",
    "Disables a specific feature or block of code.",
    "Defines a distribution function for randomization purposes.",
    "Executes the code block once, and then repeats or skips based on conditions.",
    "Specifies that the type or behavior of an element is dynamic at runtime.",
    "Defines the behavior for the 'else' part of an if statement or condition.",
    "Defines an enumeration for a set of named values.",
    "Specifies an action to be executed eventually, after a specified condition.",
    "Executes a script or function as part of the current flow of control.",
    "Exports a symbol or function to be accessible from outside the current module.",
    "Extends an existing class or function with new functionality.",
    "Represents the logical constant false.",
    "Defines a file or file-like object for input or output.",
    "Represents a 32-bit floating-point number.",
    "Represents a 64-bit floating-point number.",
    "Defines a for-loop or iteration with a condition that must hold for each iteration.",
    "Defines a for-each loop to iterate over a collection of elements.",
    "Defines a function or procedure to execute specific tasks.",
    "Indicates a check for the presence of a specific property or attribute.",
    "Defines a header or meta information for data, especially in communication.",
    "Defines a conditional structure that executes if the condition evaluates to true.",
    "Defines a conditional statement with a condition and its negation.",
    "Indicates that specific bins should be ignored in coverage or analysis.",
    "Indicates that illegal bins are present in coverage data or analysis.",
    "Imports external files, modules, or resources for use in the current code.",
    "Indicates a value is part of a specific set or range.",
    "Defines initialization actions for variables or data structures.",
    "Defines a downward initialization state.",
    "Defines an upward initialization state.",
    "Defines a variable that can accept both input and output.",
    "Defines an input variable, usually for receiving data from an external source.",
    "Defines an instance of a class or object.",
    "Defines an integer value.",
    "Specifies how multiple branches or actions are joined.",
    "Specifies that only the first branch should be joined.",
    "Specifies no joining of actions or branches.",
    "Specifies that the best matching branch should be selected.",
    "Defines a list or array-like structure to hold values.",
    "Defines a lock to manage synchronization in concurrent or parallel operations.",
    "Defines a map structure to hold key-value pairs.",
    "Defines a pattern or condition for matching elements.",
    "Defines a monitor for tracking and controlling actions.",
    "Represents a null value, indicating the absence of any object or value.",
    "Defines an output variable, usually for sending data to an external source.",
    "Overrides a method or function from a parent class.",
    "Defines a package of reusable code or components.",
    "Defines operations that can be executed in parallel.",
    "Defines a pool of resources or memory allocated for operations.",
    "Defines the actions taken after solving a problem or constraint.",
    "Defines a pre-body block that runs before the body of an action.",
    "Defines a pre-solve phase for preparing data before solving constraints.",
    "Specifies private access for a variable or method, limiting access to within the class or module.",
    "Specifies protected access, allowing access by subclasses or related classes.",
    "Specifies public access, allowing access from anywhere.",
    "Defines a pure function or method that has no side effects.",
    "Indicates that a variable is random and can be randomized during execution.",
    "Executes the randomization of variables or values in the system.",
    "Defines a reference to a variable or object.",
    "Defines a loop that repeats a certain number of times.",
    "Defines a replication factor for duplicating elements or components.",
    "Defines a resource that can be allocated or managed during execution.",
    "Defines a return value or statement in a function or method.",
    "Specifies the end of a run or execution cycle.",
    "Specifies the beginning of a run or execution cycle.",
    "Defines a scheduling mechanism for tasks or actions.",
    "Defines a selection mechanism for choosing among alternatives.",
    "Defines a sequence of actions or events to be executed in order.",
    "Defines a set, a collection of unique elements.",
    "Defines a shared resource or variable that can be accessed concurrently.",
    "Solves or resolves a problem or constraint.",
    "Defines the state of a system or action.",
    "Specifies that a variable or method is static, remaining constant throughout the program.",
    "Defines a stream of data or values.",
    "Defines a string, a sequence of characters.",
    "Defines a structure, a collection of fields or variables.",
    "Specifies the parent or superclass of a class or object.",
    "Defines a symbol, a named reference to a value or entity.",
    "Defines a target element for operations or actions.",
    "Refers to the current instance of a class or object.",
    "Represents the logical constant true.",
    "Defines a type or class of data.",
    "Defines a type alias or synonym for an existing type.",
    "Defines a unique element or instance that must be distinct from others.",
    "Specifies a function or method that does not return a value.",
    "Defines a loop that runs while a condition is true.",
    "Defines a block of code to be executed with a specified condition.",
    "Formats a string according to the specified format and arguments. Available on solve platform only.",
    "Prints a formatted string. Available on solve platform only.",
    "Outputs a message to the target platform with specified verbosity.",
    "Opens a file with specified options. Available on solve platform only.",
    "Closes an open file handle.",
    "Checks if a file exists at the given path.",
    "Writes formatted data to an open file.",
    "Reads data from a file, optionally up to a specified size.",
    "Writes multiple lines to a file, using specified file open options.",
    "Reads lines from a file and returns them as a list of strings.",
    "Outputs an error message with formatted arguments.",
    "Outputs a fatal error message with formatted arguments and terminates the program.",
    "Generates a 32-bit unsigned random number.",
    "Generates a 32-bit random number within the specified range.",
    "Extracts the mantissa from a floating-point number.",
    "Extracts the exponent from a floating-point number.",
    "Extracts the sign bit from a floating-point number.",
    "Creates a floating-point number from mantissa, exponent, and sign.",
    "Creates an address handle from an address claim with optional offset.",
    "Creates a new handle from an existing handle with specified offset.",
    "Returns the 64-bit address value for a given address handle.",
    "Solves the address value for an address handle in solve-only functions.",
    "Retrieves the tag associated with a given address handle.",
    "Reads an 8-bit value from the specified address handle.",
    "Writes an 8-bit value to the specified address handle.",
    "Gets the offset of a named instance in a register group.",
    "Computes the natural logarithm of a floating-point number.",
    "Raises x to the power y.",
    "Returns the absolute address value for an address handle in solve-only functions.",
    "Reads a 16-bit value from the specified address handle.",
    "Reads a 32-bit value from the specified address handle.",
    "Reads a 64-bit value from the specified address handle.",
    "Writes a 16-bit value to the specified address handle.",
    "Writes a 32-bit value to the specified address handle.",
    "Writes a 64-bit value to the specified address handle.",
    "Reads multiple bytes from the specified address handle into a list.",
    "Writes multiple bytes to the specified address handle from a list.",
    "Reads a packed structure from the specified address handle.",
    "Writes a packed structure to the specified address handle.",
    "Reads the value from a specified register R.",
    "Writes a value to a specified register R.",
    "Reads a value of size SZ bits from a register.",
    "Writes a value of size SZ bits to a register.",
    "Writes a masked value to a register using a register mask.",
    "Writes a masked value to a register using a bit mask of size SZ.",
    "Writes a value to a specific field within a register by name.",
    "Writes values to multiple fields within a register by names.",
    "Retrieves the 64-bit offset of an instance in an array by its name and index within a register group.",
    "Retrieves the 64-bit offset along a specified path within a register group.",
    "Sets the address handle for a register group.",
    "This package provides standard data types, utility functions, and common constructs used for building reusable and portable stimulus models in the PSS framework.",
    "This package manages the execution of scenarios by providing utilities for resource allocation, scheduling, and concurrency control, enabling efficient coordination of actions within verification models.",
    "This package facilitates the modeling and verification of addressable resources, such as memory-mapped registers and devices, providing constructs to describe address layouts, register access, and related operations in PSS."
  ]
} as const;
